node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 28
        }
        dim {
          size: 28
        }
      }
    }
  }
}
node {
  name: "zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/shape_as_tensor"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ones"
  op: "Fill"
  input: "ones/shape_as_tensor"
  input: "ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag/range_dimension_tensor/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/loc_batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ones_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Normal/Identity"
  op: "Identity"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/Identity_1"
  op: "Identity"
  input: "ones_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultivariateNormalDiag/zero"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/empty"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Normal/is_scalar_batch/is_scalar_batch"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "Normal/is_scalar_event/is_scalar_event"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/event_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Normal/is_scalar_batch_1/is_scalar_batch"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sub"
  op: "Sub"
  input: "MultivariateNormalDiag/sub/x"
  input: "MultivariateNormalDiag/Const_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/range"
  op: "Range"
  input: "MultivariateNormalDiag/sub"
  input: "MultivariateNormalDiag/range/limit"
  input: "MultivariateNormalDiag/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/flatten/Shape"
  op: "Shape"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/flatten/strided_slice"
  op: "StridedSlice"
  input: "encoder/flatten/Shape"
  input: "encoder/flatten/strided_slice/stack"
  input: "encoder/flatten/strided_slice/stack_1"
  input: "encoder/flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/flatten/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/flatten/Reshape/shape"
  op: "Pack"
  input: "encoder/flatten/strided_slice"
  input: "encoder/flatten/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/flatten/Reshape"
  op: "Reshape"
  input: "Placeholder"
  input: "encoder/flatten/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07808688282966614
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07808688282966614
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/dense/kernel/Initializer/random_uniform/max"
  input: "encoder/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/dense/kernel/Initializer/random_uniform/mul"
  input: "encoder/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense/kernel/Assign"
  op: "Assign"
  input: "encoder/dense/kernel"
  input: "encoder/dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense/kernel/read"
  op: "Identity"
  input: "encoder/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense/bias/Assign"
  op: "Assign"
  input: "encoder/dense/bias"
  input: "encoder/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense/bias/read"
  op: "Identity"
  input: "encoder/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
}
node {
  name: "encoder/dense/MatMul"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "encoder/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "encoder/dense/MatMul"
  input: "encoder/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/dense/Relu"
  op: "Relu"
  input: "encoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12247448414564133
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12247448414564133
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/max"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/mul"
  input: "encoder/dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Assign"
  op: "Assign"
  input: "encoder/dense_1/kernel"
  input: "encoder/dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_1/kernel/read"
  op: "Identity"
  input: "encoder/dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_1/bias/Assign"
  op: "Assign"
  input: "encoder/dense_1/bias"
  input: "encoder/dense_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_1/bias/read"
  op: "Identity"
  input: "encoder/dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_1/MatMul"
  op: "MatMul"
  input: "encoder/dense/Relu"
  input: "encoder/dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/dense_1/BiasAdd"
  op: "BiasAdd"
  input: "encoder/dense_1/MatMul"
  input: "encoder/dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/dense_1/Relu"
  op: "Relu"
  input: "encoder/dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17234550416469574
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17234550416469574
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/max"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/mul"
  input: "encoder/dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Assign"
  op: "Assign"
  input: "encoder/dense_2/kernel"
  input: "encoder/dense_2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_2/kernel/read"
  op: "Identity"
  input: "encoder/dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_2/bias/Assign"
  op: "Assign"
  input: "encoder/dense_2/bias"
  input: "encoder/dense_2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_2/bias/read"
  op: "Identity"
  input: "encoder/dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_2/MatMul"
  op: "MatMul"
  input: "encoder/dense_1/Relu"
  input: "encoder/dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/dense_2/BiasAdd"
  op: "BiasAdd"
  input: "encoder/dense_2/MatMul"
  input: "encoder/dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17234550416469574
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17234550416469574
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/max"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/mul"
  input: "encoder/dense_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Assign"
  op: "Assign"
  input: "encoder/dense_3/kernel"
  input: "encoder/dense_3/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_3/kernel/read"
  op: "Identity"
  input: "encoder/dense_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_3/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_3/bias/Assign"
  op: "Assign"
  input: "encoder/dense_3/bias"
  input: "encoder/dense_3/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_3/bias/read"
  op: "Identity"
  input: "encoder/dense_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_3/MatMul"
  op: "MatMul"
  input: "encoder/dense_1/Relu"
  input: "encoder/dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/dense_3/BiasAdd"
  op: "BiasAdd"
  input: "encoder/dense_3/MatMul"
  input: "encoder/dense_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/dense_3/Softplus"
  op: "Softplus"
  input: "encoder/dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag/range_dimension_tensor/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/Shape"
  op: "Shape"
  input: "encoder/dense_3/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice"
  op: "StridedSlice"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/Shape"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice/stack"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice/stack_1"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/concat/values_1"
  op: "Pack"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/concat"
  op: "ConcatV2"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/Shape"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/concat/values_1"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice"
  op: "StridedSlice"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/LinearOperatorDiag/shape_tensor/concat"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice/stack"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice/stack_1"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/Shape"
  op: "Shape"
  input: "encoder/dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice"
  op: "StridedSlice"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/Shape"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice/stack"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice/stack_1"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/prefer_static_broadcast_shape/BroadcastArgs"
  op: "BroadcastArgs"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/LinearOperatorDiag_1/batch_shape_tensor/strided_slice"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/Identity"
  op: "Identity"
  input: "encoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity_1"
  op: "Identity"
  input: "encoder/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/zero"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/empty"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/Normal/is_scalar_batch/is_scalar_batch"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/Normal/is_scalar_event/is_scalar_event"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/event_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/Normal/is_scalar_batch_1/is_scalar_batch"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sub"
  op: "Sub"
  input: "encoder/MultivariateNormalDiag/sub/x"
  input: "encoder/MultivariateNormalDiag/Const_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/range"
  op: "Range"
  input: "encoder/MultivariateNormalDiag/sub"
  input: "encoder/MultivariateNormalDiag/range/limit"
  input: "encoder/MultivariateNormalDiag/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/concat"
  op: "ConcatV2"
  input: "encoder/MultivariateNormalDiag/sample/concat/values_0"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/prefer_static_broadcast_shape/BroadcastArgs"
  input: "encoder/MultivariateNormalDiag/event_shape"
  input: "encoder/MultivariateNormalDiag/empty"
  input: "encoder/MultivariateNormalDiag/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/Prod"
  op: "Prod"
  input: "encoder/MultivariateNormalDiag/sample/concat"
  input: "encoder/Normal/sample/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/values_0"
  op: "Pack"
  input: "encoder/Normal/sample/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat"
  op: "ConcatV2"
  input: "encoder/Normal/sample/concat/values_0"
  input: "encoder/Normal/batch_shape_tensor/batch_shape"
  input: "encoder/Normal/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mul"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal/RandomStandardNormal"
  input: "encoder/Normal/sample/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal"
  op: "Add"
  input: "encoder/Normal/sample/random_normal/mul"
  input: "encoder/Normal/sample/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/mul"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/add"
  op: "Add"
  input: "encoder/Normal/sample/mul"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/Shape"
  op: "Shape"
  input: "encoder/Normal/sample/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice"
  op: "StridedSlice"
  input: "encoder/Normal/sample/Shape"
  input: "encoder/Normal/sample/strided_slice/stack"
  input: "encoder/Normal/sample/strided_slice/stack_1"
  input: "encoder/Normal/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1"
  op: "ConcatV2"
  input: "encoder/MultivariateNormalDiag/sample/concat"
  input: "encoder/Normal/sample/strided_slice"
  input: "encoder/Normal/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/Reshape"
  op: "Reshape"
  input: "encoder/Normal/sample/add"
  input: "encoder/Normal/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/Shape"
  op: "Shape"
  input: "encoder/Normal/sample/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/strided_slice"
  op: "StridedSlice"
  input: "encoder/MultivariateNormalDiag/sample/Shape"
  input: "encoder/MultivariateNormalDiag/sample/strided_slice/stack"
  input: "encoder/MultivariateNormalDiag/sample/strided_slice/stack_1"
  input: "encoder/MultivariateNormalDiag/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/concat_1"
  op: "ConcatV2"
  input: "encoder/MultivariateNormalDiag/sample/sample_shape"
  input: "encoder/MultivariateNormalDiag/sample/strided_slice"
  input: "encoder/MultivariateNormalDiag/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/Reshape"
  op: "Reshape"
  input: "encoder/Normal/sample/Reshape"
  input: "encoder/MultivariateNormalDiag/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims"
  op: "ExpandDims"
  input: "encoder/MultivariateNormalDiag/sample/Reshape"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims"
  op: "ExpandDims"
  input: "encoder/dense_3/Softplus"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul"
  op: "Mul"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze"
  op: "Squeeze"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add"
  op: "Add"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze"
  input: "encoder/dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17234550416469574
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17234550416469574
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/dense/kernel/Initializer/random_uniform/max"
  input: "decoder/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/dense/kernel/Initializer/random_uniform/mul"
  input: "decoder/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense/kernel/Assign"
  op: "Assign"
  input: "decoder/dense/kernel"
  input: "decoder/dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense/kernel/read"
  op: "Identity"
  input: "decoder/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense/bias/Assign"
  op: "Assign"
  input: "decoder/dense/bias"
  input: "decoder/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense/bias/read"
  op: "Identity"
  input: "decoder/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add"
  input: "decoder/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12247448414564133
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12247448414564133
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/max"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/mul"
  input: "decoder/dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Assign"
  op: "Assign"
  input: "decoder/dense_1/kernel"
  input: "decoder/dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_1/kernel/read"
  op: "Identity"
  input: "decoder/dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_1/bias/Assign"
  op: "Assign"
  input: "decoder/dense_1/bias"
  input: "decoder/dense_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_1/bias/read"
  op: "Identity"
  input: "decoder/dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
}
node {
  name: "decoder/dense_1/MatMul"
  op: "MatMul"
  input: "decoder/dense/Relu"
  input: "decoder/dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_1/MatMul"
  input: "decoder/dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense_1/Relu"
  op: "Relu"
  input: "decoder/dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\020\003\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07808688282966614
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07808688282966614
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/max"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/mul"
  input: "decoder/dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 784
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Assign"
  op: "Assign"
  input: "decoder/dense_2/kernel"
  input: "decoder/dense_2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_2/kernel/read"
  op: "Identity"
  input: "decoder/dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 784
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_2/bias/Assign"
  op: "Assign"
  input: "decoder/dense_2/bias"
  input: "decoder/dense_2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_2/bias/read"
  op: "Identity"
  input: "decoder/dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
}
node {
  name: "decoder/dense_2/MatMul"
  op: "MatMul"
  input: "decoder/dense_1/Relu"
  input: "decoder/dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_2/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_2/MatMul"
  input: "decoder/dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\034\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/Reshape"
  op: "Reshape"
  input: "decoder/dense_2/BiasAdd"
  input: "decoder/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/Bernoulli/probs"
  op: "Sigmoid"
  input: "decoder/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/reinterpreted_batch_ndims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/ones_like/Shape"
  op: "Shape"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/ones_like"
  op: "Fill"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like/Shape"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/mul"
  op: "Mul"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like"
  input: "decoder/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/ones_like_1/Shape"
  op: "Shape"
  input: "decoder/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/ones_like_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/ones_like_1"
  op: "Fill"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like_1/Shape"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/mul_1"
  op: "Mul"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like_1"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Select"
  op: "Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Neg"
  op: "Neg"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1"
  op: "Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Neg"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/mul"
  op: "Mul"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  input: "Independentdecoder/Bernoulli/log_prob/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/sub"
  op: "Sub"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp"
  op: "Exp"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p"
  op: "Log1p"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/logistic_loss"
  op: "Add"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/sub"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/Neg"
  op: "Neg"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\376\377\377\377"
      }
    }
  }
}
node {
  name: "Independentdecoder/Bernoulli/log_prob/Sum"
  op: "Sum"
  input: "Independentdecoder/Bernoulli/log_prob/Neg"
  input: "Independentdecoder/Bernoulli/log_prob/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/stddev/Abs"
  op: "Abs"
  input: "encoder/dense_3/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultivariateNormalDiag/stddev/Abs"
  op: "Abs"
  input: "ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/truediv"
  op: "RealDiv"
  input: "encoder/MultivariateNormalDiag/stddev/Abs"
  input: "MultivariateNormalDiag/stddev/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice"
  op: "StridedSlice"
  input: "KullbackLeibler/kl_mvn/truediv"
  input: "KullbackLeibler/kl_mvn/strided_slice/stack"
  input: "KullbackLeibler/kl_mvn/strided_slice/stack_1"
  input: "KullbackLeibler/kl_mvn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Abs"
  op: "Abs"
  input: "ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Log"
  op: "Log"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Sum"
  op: "Sum"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Log"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs"
  op: "Abs"
  input: "encoder/dense_3/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log"
  op: "Log"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum"
  op: "Sum"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/sub"
  op: "Sub"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag/log_abs_det/Sum"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_2/domain_dimension_tensor/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Cast"
  op: "Cast"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_2/domain_dimension_tensor/Const"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Neg"
  op: "Neg"
  input: "KullbackLeibler/kl_mvn/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Square"
  op: "Square"
  input: "KullbackLeibler/kl_mvn/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\376\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Sum"
  op: "Sum"
  input: "KullbackLeibler/kl_mvn/Square"
  input: "KullbackLeibler/kl_mvn/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/add"
  op: "Add"
  input: "KullbackLeibler/kl_mvn/Neg"
  input: "KullbackLeibler/kl_mvn/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultivariateNormalDiag/mean/Identity"
  op: "Identity"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/event_shape_tensor/event_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/mean/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/mean/concat"
  op: "ConcatV2"
  input: "encoder/MultivariateNormalDiag/shapes_from_loc_and_scale/prefer_static_broadcast_shape/BroadcastArgs"
  input: "encoder/MultivariateNormalDiag/event_shape_tensor/event_shape"
  input: "encoder/MultivariateNormalDiag/mean/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/mean/Identity"
  op: "Identity"
  input: "encoder/dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/mean/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/mean/zeros"
  op: "Fill"
  input: "encoder/MultivariateNormalDiag/mean/concat"
  input: "encoder/MultivariateNormalDiag/mean/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/MultivariateNormalDiag/mean/add"
  op: "Add"
  input: "encoder/MultivariateNormalDiag/mean/Identity"
  input: "encoder/MultivariateNormalDiag/mean/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/sub_1"
  op: "Sub"
  input: "MultivariateNormalDiag/mean/Identity"
  input: "encoder/MultivariateNormalDiag/mean/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/strided_slice_1"
  op: "StridedSlice"
  input: "KullbackLeibler/kl_mvn/sub_1"
  input: "KullbackLeibler/kl_mvn/strided_slice_1/stack"
  input: "KullbackLeibler/kl_mvn/strided_slice_1/stack_1"
  input: "KullbackLeibler/kl_mvn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/truediv"
  op: "RealDiv"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/truediv/x"
  input: "ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/ExpandDims"
  op: "ExpandDims"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/truediv"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul"
  op: "Mul"
  input: "KullbackLeibler/kl_mvn/strided_slice_1"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Square_1"
  op: "Square"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\376\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/Sum_1"
  op: "Sum"
  input: "KullbackLeibler/kl_mvn/Square_1"
  input: "KullbackLeibler/kl_mvn/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/add_1"
  op: "Add"
  input: "KullbackLeibler/kl_mvn/add"
  input: "KullbackLeibler/kl_mvn/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/mul"
  op: "Mul"
  input: "KullbackLeibler/kl_mvn/mul/x"
  input: "KullbackLeibler/kl_mvn/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_mvn/add_2"
  op: "Add"
  input: "KullbackLeibler/kl_mvn/sub"
  input: "KullbackLeibler/kl_mvn/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "Independentdecoder/Bernoulli/log_prob/Sum"
  input: "KullbackLeibler/kl_mvn/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "sub"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sub_grad/Shape"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_grad/Shape"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Sum"
  op: "Sum"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/Sum"
  input: "gradients/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Neg"
  op: "Neg"
  input: "gradients/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_grad/Neg"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/Reshape_1"
}
node {
  name: "gradients/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_grad/Reshape_1"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/add"
  op: "Add"
  input: "Independentdecoder/Bernoulli/log_prob/Sum/reduction_indices"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/add"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/range"
  op: "Range"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/range/start"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Size"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/range"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/mod"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/DynamicStitch"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/tuple/control_dependency"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/sub_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/sub_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/add_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Neg"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/control_dependency_1"
  input: "KullbackLeibler/kl_mvn/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Mul"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Mul_1"
  op: "Mul"
  input: "KullbackLeibler/kl_mvn/mul/x"
  input: "gradients/KullbackLeibler/kl_mvn/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Mul_1"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Shape"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Shape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Sum"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Neg_grad/Neg"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/Neg_grad/Neg"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Sum_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape_1"
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape_1"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/add"
  op: "Add"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum/reduction_indices"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/add"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/range"
  op: "Range"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/range/start"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Size"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape_1"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/range"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/mod"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/DynamicStitch"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/mul_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Shape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/control_dependency"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/control_dependency"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Neg"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape_1"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/add/x"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss_grad/tuple/control_dependency_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs"
  input: "^gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Sum_grad/Tile"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/add_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/add_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/add"
  op: "Add"
  input: "KullbackLeibler/kl_mvn/Sum_1/reduction_indices"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/add"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/range"
  op: "Range"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/range/start"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Size"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape_1"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/range"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/mod"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/DynamicStitch"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_1_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/control_dependency"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/zeros_like"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select_1"
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select_1"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Shape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "Independentdecoder/Bernoulli/log_prob/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "Independentdecoder/Bernoulli/log_prob/mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Mul_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Sum_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape_1"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Log1p_grad/mul"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs_grad/Sign"
  op: "Sign"
  input: "encoder/dense_3/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Log_grad/mul"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/add"
  op: "Add"
  input: "KullbackLeibler/kl_mvn/Sum/reduction_indices"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/add"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/range"
  op: "Range"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/range/start"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Size"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape_1"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/range"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/mod"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/DynamicStitch"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/add_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Const"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Mul"
  op: "Mul"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul"
  input: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_1_grad/Tile"
  input: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp_grad/mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "Independentdecoder/Bernoulli/log_prob/logistic_loss/GreaterEqual"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/zeros_like"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select_1"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Square_grad/Const"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_mvn/Sum_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Square_grad/Mul"
  op: "Mul"
  input: "KullbackLeibler/kl_mvn/strided_slice"
  input: "gradients/KullbackLeibler/kl_mvn/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/Sum_grad/Tile"
  input: "gradients/KullbackLeibler/kl_mvn/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Mul_1"
  input: "KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Mul"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Mul_1"
  op: "Mul"
  input: "KullbackLeibler/kl_mvn/strided_slice_1"
  input: "gradients/KullbackLeibler/kl_mvn/Square_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Mul_1"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/strided_slice_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/KullbackLeibler/kl_mvn/strided_slice_grad/Shape"
  input: "KullbackLeibler/kl_mvn/strided_slice/stack"
  input: "KullbackLeibler/kl_mvn/strided_slice/stack_1"
  input: "KullbackLeibler/kl_mvn/strided_slice/stack_2"
  input: "gradients/KullbackLeibler/kl_mvn/Square_grad/Mul_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/strided_slice_1_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_mvn/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/KullbackLeibler/kl_mvn/strided_slice_1_grad/Shape"
  input: "KullbackLeibler/kl_mvn/strided_slice_1/stack"
  input: "KullbackLeibler/kl_mvn/strided_slice_1/stack_1"
  input: "KullbackLeibler/kl_mvn/strided_slice_1/stack_2"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_3/solve/mul_grad/tuple/control_dependency"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Shape"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/stddev/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_mvn/strided_slice_grad/StridedSliceGrad"
  input: "MultivariateNormalDiag/stddev/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/RealDiv"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Neg"
  op: "Neg"
  input: "encoder/MultivariateNormalDiag/stddev/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Neg"
  input: "MultivariateNormalDiag/stddev/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/RealDiv_1"
  input: "MultivariateNormalDiag/stddev/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/strided_slice_grad/StridedSliceGrad"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/mul"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/truediv_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/mean/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/strided_slice_1_grad/StridedSliceGrad"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Sum"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/strided_slice_1_grad/StridedSliceGrad"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Neg"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/sub_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/tuple/control_dependency"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/mul_grad/tuple/control_dependency"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/logistic_loss/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Shape"
  op: "Shape"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Shape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "decoder/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Mul"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "Independentdecoder/Bernoulli/log_prob/ones_like"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Mul_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Sum_1"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape_1"
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape_1"
  input: "^gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/stddev/Abs_grad/Sign"
  op: "Sign"
  input: "encoder/dense_3/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/stddev/Abs_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_mvn/truediv_grad/tuple/control_dependency"
  input: "gradients/encoder/MultivariateNormalDiag/stddev/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Shape"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/mean/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Shape_1"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/mean/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Shape"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Sum"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_mvn/sub_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Sum_1"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape"
  input: "^gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape_1"
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape"
  input: "^gradients/encoder/MultivariateNormalDiag/mean/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape_1"
  input: "^gradients/encoder/MultivariateNormalDiag/mean/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/decoder/Reshape_grad/Shape"
  op: "Shape"
  input: "decoder/dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Independentdecoder/Bernoulli/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/decoder/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/dense_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/Reshape_grad/Reshape"
  input: "^gradients/decoder/dense_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/decoder/dense_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/Reshape_grad/Reshape"
  input: "^gradients/decoder/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/dense_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/dense_2/BiasAdd_grad/tuple/control_dependency"
  input: "decoder/dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/dense_1/Relu"
  input: "gradients/decoder/dense_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/dense_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/dense_2/MatMul_grad/MatMul"
  input: "^gradients/decoder/dense_2/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder/dense_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/dense_2/MatMul_grad/MatMul"
  input: "^gradients/decoder/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_2/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/dense_2/MatMul_grad/MatMul_1"
  input: "^gradients/decoder/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_2/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/decoder/dense_2/MatMul_grad/tuple/control_dependency"
  input: "decoder/dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/dense_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/decoder/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/dense_1/Relu_grad/ReluGrad"
  input: "^gradients/decoder/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_1/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "decoder/dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/dense/Relu"
  input: "gradients/decoder/dense_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/dense_1/MatMul_grad/MatMul"
  input: "^gradients/decoder/dense_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/dense_1/MatMul_grad/MatMul"
  input: "^gradients/decoder/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/dense_1/MatMul_grad/MatMul_1"
  input: "^gradients/decoder/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/decoder/dense_1/MatMul_grad/tuple/control_dependency"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/dense/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/dense/Relu_grad/ReluGrad"
}
node {
  name: "gradients/decoder/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/dense/Relu_grad/ReluGrad"
  input: "^gradients/decoder/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/dense/BiasAdd_grad/tuple/control_dependency"
  input: "decoder/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add"
  input: "gradients/decoder/dense/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/dense/MatMul_grad/MatMul"
  input: "^gradients/decoder/dense/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/dense/MatMul_grad/MatMul"
  input: "^gradients/decoder/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/decoder/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/dense/MatMul_grad/MatMul_1"
  input: "^gradients/decoder/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/dense/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Shape"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Shape_1"
  op: "Shape"
  input: "encoder/dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Shape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Sum"
  op: "Sum"
  input: "gradients/decoder/dense/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Sum"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder/dense/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Sum_1"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape_1"
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape_1"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze_grad/Shape"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/control_dependency"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/encoder/MultivariateNormalDiag/mean/add_grad/tuple/control_dependency"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/dense_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_1"
  input: "^gradients/encoder/dense_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/encoder/dense_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_1"
  input: "^gradients/encoder/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/mean/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Shape"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Shape_1"
  op: "Shape"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Shape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze_grad/Reshape"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Mul"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Sum"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Mul_1"
  op: "Mul"
  input: "encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Mul_1"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Sum_1"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape_1"
  input: "^gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/dense_2/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/dense_1/Relu"
  input: "gradients/encoder/dense_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/dense_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense_2/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense_2/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/dense_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense_2/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_2/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense_2/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_2/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims_grad/Shape"
  op: "Shape"
  input: "encoder/dense_3/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul_grad/tuple/control_dependency"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs_grad/mul"
  input: "gradients/encoder/MultivariateNormalDiag/stddev/Abs_grad/mul"
  input: "gradients/encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_mvn/LinearOperatorDiag_1/log_abs_det/Abs_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_3/Softplus_grad/SoftplusGrad"
  op: "SoftplusGrad"
  input: "gradients/AddN_2"
  input: "encoder/dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/dense_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/dense_3/Softplus_grad/SoftplusGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/dense_3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense_3/Softplus_grad/SoftplusGrad"
}
node {
  name: "gradients/encoder/dense_3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense_3/Softplus_grad/SoftplusGrad"
  input: "^gradients/encoder/dense_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_3/Softplus_grad/SoftplusGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/dense_3/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/dense_3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/dense_1/Relu"
  input: "gradients/encoder/dense_3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/dense_3/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense_3/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense_3/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/dense_3/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense_3/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense_3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_3/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_3/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense_3/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/dense_3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_3/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/encoder/dense_2/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder/dense_3/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_2/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_3"
  input: "encoder/dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/encoder/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense_1/Relu_grad/ReluGrad"
  input: "^gradients/encoder/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_1/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/dense/Relu"
  input: "gradients/encoder/dense_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense_1/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense_1/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense_1/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/encoder/dense_1/MatMul_grad/tuple/control_dependency"
  input: "encoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/dense/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense/Relu_grad/ReluGrad"
}
node {
  name: "gradients/encoder/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense/Relu_grad/ReluGrad"
  input: "^gradients/encoder/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/dense/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "gradients/encoder/dense/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/dense/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/dense/MatMul_grad/MatMul"
  input: "^gradients/encoder/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/dense/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/dense/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/dense/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/dense/kernel/Adam"
  input: "encoder/dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam/read"
  op: "Identity"
  input: "encoder/dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/dense/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense/kernel/Adam_1"
  input: "encoder/dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/dense/bias/Adam"
  input: "encoder/dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense/bias/Adam/read"
  op: "Identity"
  input: "encoder/dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
}
node {
  name: "encoder/dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense/bias/Adam_1"
  input: "encoder/dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/dense_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/dense_1/kernel/Adam"
  input: "encoder/dense_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam/read"
  op: "Identity"
  input: "encoder/dense_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/dense_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense_1/kernel/Adam_1"
  input: "encoder/dense_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_1/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/dense_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/dense_1/bias/Adam"
  input: "encoder/dense_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam/read"
  op: "Identity"
  input: "encoder/dense_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense_1/bias/Adam_1"
  input: "encoder/dense_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_1/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/dense_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/dense_2/kernel/Adam"
  input: "encoder/dense_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam/read"
  op: "Identity"
  input: "encoder/dense_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense_2/kernel/Adam_1"
  input: "encoder/dense_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_2/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/dense_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/dense_2/bias/Adam"
  input: "encoder/dense_2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam/read"
  op: "Identity"
  input: "encoder/dense_2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense_2/bias/Adam_1"
  input: "encoder/dense_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_2/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/dense_2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/dense_3/kernel/Adam"
  input: "encoder/dense_3/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam/read"
  op: "Identity"
  input: "encoder/dense_3/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense_3/kernel/Adam_1"
  input: "encoder/dense_3/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_3/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/dense_3/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/dense_3/bias/Adam"
  input: "encoder/dense_3/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam/read"
  op: "Identity"
  input: "encoder/dense_3/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/dense_3/bias/Adam_1"
  input: "encoder/dense_3/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/dense_3/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/dense_3/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/dense/kernel/Adam"
  input: "decoder/dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam/read"
  op: "Identity"
  input: "decoder/dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/dense/kernel/Adam_1"
  input: "decoder/dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/dense/bias/Adam"
  input: "decoder/dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense/bias/Adam/read"
  op: "Identity"
  input: "decoder/dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "decoder/dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/dense/bias/Adam_1"
  input: "decoder/dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/dense_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/dense_1/kernel/Adam"
  input: "decoder/dense_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam/read"
  op: "Identity"
  input: "decoder/dense_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/dense_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/dense_1/kernel/Adam_1"
  input: "decoder/dense_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_1/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/dense_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/dense_1/bias/Adam"
  input: "decoder/dense_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam/read"
  op: "Identity"
  input: "decoder/dense_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/dense_1/bias/Adam_1"
  input: "decoder/dense_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_1/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/dense_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\020\003\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/dense_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/dense_2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 784
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/dense_2/kernel/Adam"
  input: "decoder/dense_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam/read"
  op: "Identity"
  input: "decoder/dense_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\020\003\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/dense_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/dense_2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 784
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/dense_2/kernel/Adam_1"
  input: "decoder/dense_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_2/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/dense_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 784
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/dense_2/bias/Adam"
  input: "decoder/dense_2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam/read"
  op: "Identity"
  input: "decoder/dense_2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 784
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/dense_2/bias/Adam_1"
  input: "decoder/dense_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/dense_2/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/dense_2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_encoder/dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense/kernel"
  input: "encoder/dense/kernel/Adam"
  input: "encoder/dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense/bias"
  input: "encoder/dense/bias/Adam"
  input: "encoder/dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense_1/kernel"
  input: "encoder/dense_1/kernel/Adam"
  input: "encoder/dense_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense_1/bias"
  input: "encoder/dense_1/bias/Adam"
  input: "encoder/dense_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense_2/kernel"
  input: "encoder/dense_2/kernel/Adam"
  input: "encoder/dense_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense_2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense_2/bias"
  input: "encoder/dense_2/bias/Adam"
  input: "encoder/dense_2/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense_3/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense_3/kernel"
  input: "encoder/dense_3/kernel/Adam"
  input: "encoder/dense_3/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense_3/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/dense_3/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/dense_3/bias"
  input: "encoder/dense_3/bias/Adam"
  input: "encoder/dense_3/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/dense_3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/dense/kernel"
  input: "decoder/dense/kernel/Adam"
  input: "decoder/dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/dense/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/dense/bias"
  input: "decoder/dense/bias/Adam"
  input: "decoder/dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/dense_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/dense_1/kernel"
  input: "decoder/dense_1/kernel/Adam"
  input: "decoder/dense_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/dense_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/dense_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/dense_1/bias"
  input: "decoder/dense_1/bias/Adam"
  input: "decoder/dense_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/dense_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/dense_2/kernel"
  input: "decoder/dense_2/kernel/Adam"
  input: "decoder/dense_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/dense_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/dense_2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/dense_2/bias"
  input: "decoder/dense_2/bias/Adam"
  input: "decoder/dense_2/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_decoder/dense/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense/kernel/ApplyAdam"
  input: "^Adam/update_decoder/dense_1/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense_1/kernel/ApplyAdam"
  input: "^Adam/update_decoder/dense_2/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense_2/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_1/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_1/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_2/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_2/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_3/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_3/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_decoder/dense/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense/kernel/ApplyAdam"
  input: "^Adam/update_decoder/dense_1/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense_1/kernel/ApplyAdam"
  input: "^Adam/update_decoder/dense_2/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense_2/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_1/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_1/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_2/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_2/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_3/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_3/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_decoder/dense/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense/kernel/ApplyAdam"
  input: "^Adam/update_decoder/dense_1/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense_1/kernel/ApplyAdam"
  input: "^Adam/update_decoder/dense_2/bias/ApplyAdam"
  input: "^Adam/update_decoder/dense_2/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_1/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_1/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_2/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_2/kernel/ApplyAdam"
  input: "^Adam/update_encoder/dense_3/bias/ApplyAdam"
  input: "^Adam/update_encoder/dense_3/kernel/ApplyAdam"
}
node {
  name: "MultivariateNormalDiag/sample/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/sample_shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Normal/batch_shape_tensor/batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Normal/sample/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Normal/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Normal/sample/concat"
  op: "ConcatV2"
  input: "Normal/sample/concat/values_0"
  input: "Normal/batch_shape_tensor/batch_shape"
  input: "Normal/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Normal/sample/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Normal/sample/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Normal/sample/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "Normal/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Normal/sample/random_normal/mul"
  op: "Mul"
  input: "Normal/sample/random_normal/RandomStandardNormal"
  input: "Normal/sample/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/sample/random_normal"
  op: "Add"
  input: "Normal/sample/random_normal/mul"
  input: "Normal/sample/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/sample/mul"
  op: "Mul"
  input: "Normal/sample/random_normal"
  input: "Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/sample/add"
  op: "Add"
  input: "Normal/sample/mul"
  input: "Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/sample/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Normal/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Normal/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Normal/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Normal/sample/strided_slice"
  op: "StridedSlice"
  input: "Normal/sample/Shape"
  input: "Normal/sample/strided_slice/stack"
  input: "Normal/sample/strided_slice/stack_1"
  input: "Normal/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Normal/sample/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Normal/sample/concat_1"
  op: "ConcatV2"
  input: "MultivariateNormalDiag/sample/Const_1"
  input: "Normal/sample/strided_slice"
  input: "Normal/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Normal/sample/Reshape"
  op: "Reshape"
  input: "Normal/sample/add"
  input: "Normal/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/strided_slice"
  op: "StridedSlice"
  input: "MultivariateNormalDiag/sample/Shape"
  input: "MultivariateNormalDiag/sample/strided_slice/stack"
  input: "MultivariateNormalDiag/sample/strided_slice/stack_1"
  input: "MultivariateNormalDiag/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/concat"
  op: "ConcatV2"
  input: "MultivariateNormalDiag/sample/sample_shape_1"
  input: "MultivariateNormalDiag/sample/strided_slice"
  input: "MultivariateNormalDiag/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/Reshape"
  op: "Reshape"
  input: "Normal/sample/Reshape"
  input: "MultivariateNormalDiag/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims"
  op: "ExpandDims"
  input: "MultivariateNormalDiag/sample/Reshape"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims"
  op: "ExpandDims"
  input: "ones"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul"
  op: "Mul"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/ExpandDims"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze"
  op: "Squeeze"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/LinearOperatorDiag/matmul/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/affine_linear_operator/forward/add"
  op: "Add"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/LinearOperatorDiag/matvec/Squeeze"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/dense/MatMul"
  op: "MatMul"
  input: "MultivariateNormalDiag/sample/affine_linear_operator/forward/add"
  input: "decoder/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder_1/dense/MatMul"
  input: "decoder/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder_1/dense/Relu"
  op: "Relu"
  input: "decoder_1/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/dense_1/MatMul"
  op: "MatMul"
  input: "decoder_1/dense/Relu"
  input: "decoder/dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/dense_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder_1/dense_1/MatMul"
  input: "decoder/dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder_1/dense_1/Relu"
  op: "Relu"
  input: "decoder_1/dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/dense_2/MatMul"
  op: "MatMul"
  input: "decoder_1/dense_1/Relu"
  input: "decoder/dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/dense_2/BiasAdd"
  op: "BiasAdd"
  input: "decoder_1/dense_2/MatMul"
  input: "decoder/dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\034\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/Reshape"
  op: "Reshape"
  input: "decoder_1/dense_2/BiasAdd"
  input: "decoder_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/Bernoulli/probs"
  op: "Sigmoid"
  input: "decoder_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/reinterpreted_batch_ndims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/sample_shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/batch_shape_tensor/batch_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\n\000\000\000\034\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/concat"
  op: "ConcatV2"
  input: "decoder_1/Bernoulli/sample/concat/values_0"
  input: "decoder_1/Bernoulli/batch_shape_tensor/batch_shape"
  input: "decoder_1/Bernoulli/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_1/Bernoulli/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/random_uniform/sub"
  op: "Sub"
  input: "decoder_1/Bernoulli/sample/random_uniform/max"
  input: "decoder_1/Bernoulli/sample/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/random_uniform/mul"
  op: "Mul"
  input: "decoder_1/Bernoulli/sample/random_uniform/RandomUniform"
  input: "decoder_1/Bernoulli/sample/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/random_uniform"
  op: "Add"
  input: "decoder_1/Bernoulli/sample/random_uniform/mul"
  input: "decoder_1/Bernoulli/sample/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/Less"
  op: "Less"
  input: "decoder_1/Bernoulli/sample/random_uniform"
  input: "decoder_1/Bernoulli/probs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/Cast"
  op: "Cast"
  input: "decoder_1/Bernoulli/sample/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000\034\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/strided_slice"
  op: "StridedSlice"
  input: "decoder_1/Bernoulli/sample/Shape"
  input: "decoder_1/Bernoulli/sample/strided_slice/stack"
  input: "decoder_1/Bernoulli/sample/strided_slice/stack_1"
  input: "decoder_1/Bernoulli/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/concat_1"
  op: "ConcatV2"
  input: "decoder_1/Bernoulli/sample/sample_shape_1"
  input: "decoder_1/Bernoulli/sample/strided_slice"
  input: "decoder_1/Bernoulli/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/Bernoulli/sample/Reshape"
  op: "Reshape"
  input: "decoder_1/Bernoulli/sample/Cast"
  input: "decoder_1/Bernoulli/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000\034\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/strided_slice"
  op: "StridedSlice"
  input: "Independentdecoder_1/Bernoulli/sample/Shape"
  input: "Independentdecoder_1/Bernoulli/sample/strided_slice/stack"
  input: "Independentdecoder_1/Bernoulli/sample/strided_slice/stack_1"
  input: "Independentdecoder_1/Bernoulli/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/concat"
  op: "ConcatV2"
  input: "Independentdecoder_1/Bernoulli/sample/sample_shape"
  input: "Independentdecoder_1/Bernoulli/sample/strided_slice"
  input: "Independentdecoder_1/Bernoulli/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Independentdecoder_1/Bernoulli/sample/Reshape"
  op: "Reshape"
  input: "decoder_1/Bernoulli/sample/Reshape"
  input: "Independentdecoder_1/Bernoulli/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^decoder/dense/bias/Adam/Assign"
  input: "^decoder/dense/bias/Adam_1/Assign"
  input: "^decoder/dense/bias/Assign"
  input: "^decoder/dense/kernel/Adam/Assign"
  input: "^decoder/dense/kernel/Adam_1/Assign"
  input: "^decoder/dense/kernel/Assign"
  input: "^decoder/dense_1/bias/Adam/Assign"
  input: "^decoder/dense_1/bias/Adam_1/Assign"
  input: "^decoder/dense_1/bias/Assign"
  input: "^decoder/dense_1/kernel/Adam/Assign"
  input: "^decoder/dense_1/kernel/Adam_1/Assign"
  input: "^decoder/dense_1/kernel/Assign"
  input: "^decoder/dense_2/bias/Adam/Assign"
  input: "^decoder/dense_2/bias/Adam_1/Assign"
  input: "^decoder/dense_2/bias/Assign"
  input: "^decoder/dense_2/kernel/Adam/Assign"
  input: "^decoder/dense_2/kernel/Adam_1/Assign"
  input: "^decoder/dense_2/kernel/Assign"
  input: "^encoder/dense/bias/Adam/Assign"
  input: "^encoder/dense/bias/Adam_1/Assign"
  input: "^encoder/dense/bias/Assign"
  input: "^encoder/dense/kernel/Adam/Assign"
  input: "^encoder/dense/kernel/Adam_1/Assign"
  input: "^encoder/dense/kernel/Assign"
  input: "^encoder/dense_1/bias/Adam/Assign"
  input: "^encoder/dense_1/bias/Adam_1/Assign"
  input: "^encoder/dense_1/bias/Assign"
  input: "^encoder/dense_1/kernel/Adam/Assign"
  input: "^encoder/dense_1/kernel/Adam_1/Assign"
  input: "^encoder/dense_1/kernel/Assign"
  input: "^encoder/dense_2/bias/Adam/Assign"
  input: "^encoder/dense_2/bias/Adam_1/Assign"
  input: "^encoder/dense_2/bias/Assign"
  input: "^encoder/dense_2/kernel/Adam/Assign"
  input: "^encoder/dense_2/kernel/Adam_1/Assign"
  input: "^encoder/dense_2/kernel/Assign"
  input: "^encoder/dense_3/bias/Adam/Assign"
  input: "^encoder/dense_3/bias/Adam_1/Assign"
  input: "^encoder/dense_3/bias/Assign"
  input: "^encoder/dense_3/kernel/Adam/Assign"
  input: "^encoder/dense_3/kernel/Adam_1/Assign"
  input: "^encoder/dense_3/kernel/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 44
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "decoder/dense/bias"
        string_val: "decoder/dense/bias/Adam"
        string_val: "decoder/dense/bias/Adam_1"
        string_val: "decoder/dense/kernel"
        string_val: "decoder/dense/kernel/Adam"
        string_val: "decoder/dense/kernel/Adam_1"
        string_val: "decoder/dense_1/bias"
        string_val: "decoder/dense_1/bias/Adam"
        string_val: "decoder/dense_1/bias/Adam_1"
        string_val: "decoder/dense_1/kernel"
        string_val: "decoder/dense_1/kernel/Adam"
        string_val: "decoder/dense_1/kernel/Adam_1"
        string_val: "decoder/dense_2/bias"
        string_val: "decoder/dense_2/bias/Adam"
        string_val: "decoder/dense_2/bias/Adam_1"
        string_val: "decoder/dense_2/kernel"
        string_val: "decoder/dense_2/kernel/Adam"
        string_val: "decoder/dense_2/kernel/Adam_1"
        string_val: "encoder/dense/bias"
        string_val: "encoder/dense/bias/Adam"
        string_val: "encoder/dense/bias/Adam_1"
        string_val: "encoder/dense/kernel"
        string_val: "encoder/dense/kernel/Adam"
        string_val: "encoder/dense/kernel/Adam_1"
        string_val: "encoder/dense_1/bias"
        string_val: "encoder/dense_1/bias/Adam"
        string_val: "encoder/dense_1/bias/Adam_1"
        string_val: "encoder/dense_1/kernel"
        string_val: "encoder/dense_1/kernel/Adam"
        string_val: "encoder/dense_1/kernel/Adam_1"
        string_val: "encoder/dense_2/bias"
        string_val: "encoder/dense_2/bias/Adam"
        string_val: "encoder/dense_2/bias/Adam_1"
        string_val: "encoder/dense_2/kernel"
        string_val: "encoder/dense_2/kernel/Adam"
        string_val: "encoder/dense_2/kernel/Adam_1"
        string_val: "encoder/dense_3/bias"
        string_val: "encoder/dense_3/bias/Adam"
        string_val: "encoder/dense_3/bias/Adam_1"
        string_val: "encoder/dense_3/kernel"
        string_val: "encoder/dense_3/kernel/Adam"
        string_val: "encoder/dense_3/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 44
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "decoder/dense/bias"
  input: "decoder/dense/bias/Adam"
  input: "decoder/dense/bias/Adam_1"
  input: "decoder/dense/kernel"
  input: "decoder/dense/kernel/Adam"
  input: "decoder/dense/kernel/Adam_1"
  input: "decoder/dense_1/bias"
  input: "decoder/dense_1/bias/Adam"
  input: "decoder/dense_1/bias/Adam_1"
  input: "decoder/dense_1/kernel"
  input: "decoder/dense_1/kernel/Adam"
  input: "decoder/dense_1/kernel/Adam_1"
  input: "decoder/dense_2/bias"
  input: "decoder/dense_2/bias/Adam"
  input: "decoder/dense_2/bias/Adam_1"
  input: "decoder/dense_2/kernel"
  input: "decoder/dense_2/kernel/Adam"
  input: "decoder/dense_2/kernel/Adam_1"
  input: "encoder/dense/bias"
  input: "encoder/dense/bias/Adam"
  input: "encoder/dense/bias/Adam_1"
  input: "encoder/dense/kernel"
  input: "encoder/dense/kernel/Adam"
  input: "encoder/dense/kernel/Adam_1"
  input: "encoder/dense_1/bias"
  input: "encoder/dense_1/bias/Adam"
  input: "encoder/dense_1/bias/Adam_1"
  input: "encoder/dense_1/kernel"
  input: "encoder/dense_1/kernel/Adam"
  input: "encoder/dense_1/kernel/Adam_1"
  input: "encoder/dense_2/bias"
  input: "encoder/dense_2/bias/Adam"
  input: "encoder/dense_2/bias/Adam_1"
  input: "encoder/dense_2/kernel"
  input: "encoder/dense_2/kernel/Adam"
  input: "encoder/dense_2/kernel/Adam_1"
  input: "encoder/dense_3/bias"
  input: "encoder/dense_3/bias/Adam"
  input: "encoder/dense_3/bias/Adam_1"
  input: "encoder/dense_3/kernel"
  input: "encoder/dense_3/kernel/Adam"
  input: "encoder/dense_3/kernel/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 44
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "decoder/dense/bias"
        string_val: "decoder/dense/bias/Adam"
        string_val: "decoder/dense/bias/Adam_1"
        string_val: "decoder/dense/kernel"
        string_val: "decoder/dense/kernel/Adam"
        string_val: "decoder/dense/kernel/Adam_1"
        string_val: "decoder/dense_1/bias"
        string_val: "decoder/dense_1/bias/Adam"
        string_val: "decoder/dense_1/bias/Adam_1"
        string_val: "decoder/dense_1/kernel"
        string_val: "decoder/dense_1/kernel/Adam"
        string_val: "decoder/dense_1/kernel/Adam_1"
        string_val: "decoder/dense_2/bias"
        string_val: "decoder/dense_2/bias/Adam"
        string_val: "decoder/dense_2/bias/Adam_1"
        string_val: "decoder/dense_2/kernel"
        string_val: "decoder/dense_2/kernel/Adam"
        string_val: "decoder/dense_2/kernel/Adam_1"
        string_val: "encoder/dense/bias"
        string_val: "encoder/dense/bias/Adam"
        string_val: "encoder/dense/bias/Adam_1"
        string_val: "encoder/dense/kernel"
        string_val: "encoder/dense/kernel/Adam"
        string_val: "encoder/dense/kernel/Adam_1"
        string_val: "encoder/dense_1/bias"
        string_val: "encoder/dense_1/bias/Adam"
        string_val: "encoder/dense_1/bias/Adam_1"
        string_val: "encoder/dense_1/kernel"
        string_val: "encoder/dense_1/kernel/Adam"
        string_val: "encoder/dense_1/kernel/Adam_1"
        string_val: "encoder/dense_2/bias"
        string_val: "encoder/dense_2/bias/Adam"
        string_val: "encoder/dense_2/bias/Adam_1"
        string_val: "encoder/dense_2/kernel"
        string_val: "encoder/dense_2/kernel/Adam"
        string_val: "encoder/dense_2/kernel/Adam_1"
        string_val: "encoder/dense_3/bias"
        string_val: "encoder/dense_3/bias/Adam"
        string_val: "encoder/dense_3/bias/Adam_1"
        string_val: "encoder/dense_3/kernel"
        string_val: "encoder/dense_3/kernel/Adam"
        string_val: "encoder/dense_3/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 44
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "decoder/dense/bias"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "decoder/dense/bias/Adam"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "decoder/dense/bias/Adam_1"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "decoder/dense/kernel"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "decoder/dense/kernel/Adam"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "decoder/dense/kernel/Adam_1"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "decoder/dense_1/bias"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "decoder/dense_1/bias/Adam"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "decoder/dense_1/bias/Adam_1"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "decoder/dense_1/kernel"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "decoder/dense_1/kernel/Adam"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "decoder/dense_1/kernel/Adam_1"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "decoder/dense_2/bias"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "decoder/dense_2/bias/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "decoder/dense_2/bias/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "decoder/dense_2/kernel"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "decoder/dense_2/kernel/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "decoder/dense_2/kernel/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "encoder/dense/bias"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "encoder/dense/bias/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "encoder/dense/bias/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "encoder/dense/kernel"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "encoder/dense/kernel/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "encoder/dense/kernel/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "encoder/dense_1/bias"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "encoder/dense_1/bias/Adam"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "encoder/dense_1/bias/Adam_1"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "encoder/dense_1/kernel"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "encoder/dense_1/kernel/Adam"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "encoder/dense_1/kernel/Adam_1"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "encoder/dense_2/bias"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "encoder/dense_2/bias/Adam"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "encoder/dense_2/bias/Adam_1"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "encoder/dense_2/kernel"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "encoder/dense_2/kernel/Adam"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "encoder/dense_2/kernel/Adam_1"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "encoder/dense_3/bias"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "encoder/dense_3/bias/Adam"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "encoder/dense_3/bias/Adam_1"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "encoder/dense_3/kernel"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "encoder/dense_3/kernel/Adam"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "encoder/dense_3/kernel/Adam_1"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
versions {
  producer: 27
}
